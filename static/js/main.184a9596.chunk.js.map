{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/TaskControlSearch.js","components/TaskControlSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/editTask.js","reducers/index.js","reducers/isDisplayForm.js","index.js"],"names":["openForm","type","closeForm","editTask","payload","TaskForm","props","onChange","event","target","name","value","checked","setState","onSave","preventDefault","onSaveTask","state","onClear","onCloseForm","id","status","this","prevProps","prevState","isDisplayForm","className","onClick","onSubmit","Component","mapDispatchToProps","connect","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","sort","by","parseInt","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","TaskControlSearch","TaskControlSort","TaskItem","onUpdateStatus","task","onDeleteTask","onEditTask","onOpenForm","index","TaskList","onFilter","filterName","filterStatus","tasks","elmTasks","map","key","App","onToggleForm","onClearTask","filter","TaskControl","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","initialState","s4","Math","floor","random","toString","substring","generateID","findIndex","result","forEach","row","myReducer","combineReducers","push","setItem","stringify","splice","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAgBaA,EAAW,iBAAO,CAC3BC,KCXqB,cDcZC,EAAY,iBAAO,CAC5BD,KChBsB,eD6BbE,EAAW,SAACC,GAAD,MAAc,CAClCH,KChCqB,YDiCrBG,YEhCSC,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6BRC,SAAW,SAACC,GACV,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAwB,aAAhBF,EAAOR,KAAsBQ,EAAOG,QAAUH,EAAOE,MACnE,EAAKE,SAAL,eACGH,EAAOC,KAnCO,EAuCnBG,OAAS,SAACN,GACRA,EAAMO,iBACN,EAAKT,MAAMU,WAAW,EAAKC,OAC3B,EAAKC,UACL,EAAKZ,MAAMa,eA3CM,EA8CnBD,QAAU,WACR,EAAKL,SAAS,CACZO,GAAI,GACJV,KAAM,GACNW,QAAQ,KA/CV,EAAKJ,MAAQ,GAHI,EADrB,gEAQQK,KAAKhB,MAAMH,UACbmB,KAAKT,SAAS,CACZO,GAAIE,KAAKhB,MAAMH,SAASiB,GACxBV,KAAMY,KAAKhB,MAAMH,SAASO,KAC1BW,OAAQC,KAAKhB,MAAMH,SAASkB,WAZpC,yCAiBqBE,EAAWC,GACxBD,EAAUpB,WAAamB,KAAKhB,MAAMH,WAChCmB,KAAKhB,MAAMH,SACbmB,KAAKT,SAAS,CACZO,GAAIE,KAAKhB,MAAMH,SAASiB,GACxBV,KAAMY,KAAKhB,MAAMH,SAASO,KAC1BW,OAAQC,KAAKhB,MAAMH,SAASkB,SAG9BC,KAAKJ,aA1Bb,+BAuDY,IAAD,EACsBI,KAAKL,MAA1BG,EADD,EACCA,GAAIV,EADL,EACKA,KAAMW,EADX,EACWA,OAElB,OAD0BC,KAAKhB,MAAvBmB,cAGN,yBAAKC,UAAU,wCAEb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eACXN,EAAK,uCAAuB,4BAC7B,0BACEM,UAAU,gCACVC,QAASL,KAAKhB,MAAMa,gBAI1B,yBAAKO,UAAU,cACb,0BAAME,SAAUN,KAAKR,QACnB,yBAAKY,UAAU,cACb,2CACA,2BACEzB,KAAK,OACLyB,UAAU,eACVhB,KAAK,OACLC,MAAOD,EACPH,SAAUe,KAAKf,YAGnB,yBAAKmB,UAAU,cACb,uDACA,4BACEhB,KAAK,SACLgB,UAAU,eACVf,MAAOU,EACPd,SAAUe,KAAKf,UAEf,4BAAQI,OAAO,GAAf,WACA,4BAAQA,OAAO,GAAf,uBAGJ,yBAAKe,UAAU,eACb,4BAAQzB,KAAK,SAASyB,UAAU,mBAC9B,0BAAMA,UAAU,oBADlB,qBADF,QAIE,4BACEzB,KAAK,QACLyB,UAAU,iBACVC,QAASL,KAAKJ,SAEd,0BAAMQ,UAAU,qBALlB,yBA1Ce,OA1D/B,GAA8BG,aAyHxBC,EAAqB,CACzBd,WFvHsB,SAACZ,GAAD,MAAc,CAClCH,KCPqB,YDQrBG,YEsHFe,YAAajB,GAGA6B,eAVS,SAACd,GAAD,MAAY,CAClCQ,cAAeR,EAAMQ,cACrBtB,SAAUc,EAAMd,YAQsB2B,EAAzBC,CAA6C1B,GChF7C2B,EAhDf,kDACI,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAOVC,SAAW,SAACC,GACR,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KACdC,EAAwB,aAAhBF,EAAOR,KAAsBQ,EAAOG,QAAUH,EAAOE,MACnE,EAAKE,SAAL,eACKH,EAAOC,KAbG,EAiBnBsB,SAAW,WACP,EAAK3B,MAAM2B,SAAS,EAAKhB,MAAMiB,UAf/B,EAAKjB,MAAQ,CACRiB,QAAS,IAJC,EADvB,qDAuBQ,OACI,yBAAKR,UAAU,8CACX,yBAAKA,UAAU,eACX,2BACIhB,KAAK,UACLT,KAAK,OACLyB,UAAU,eACVS,YAAY,gCACZ5B,SAAUe,KAAKf,WAEnB,0BAAMmB,UAAU,mBACZ,4BACIzB,KAAK,SACLyB,UAAU,kBACVC,QAASL,KAAKW,UAEd,0BAAMP,UAAU,sBALpB,iBAlCxB,GAA4BG,aCsEbO,EAtEf,kDACI,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IAUVqB,QAAU,SAACU,EAAQC,EAAW9B,GAC1B,EAAKK,SAAS,CACV0B,KAAM,CACFC,GAAIH,EACJ1B,MAAO8B,SAASH,MAGxB,EAAKhC,MAAMoC,OAAOL,EAAQC,IAf1B,EAAKrB,MAAQ,CACRsB,KAAM,CACFC,GAAI,OACJ7B,MAAO,IAND,EADvB,qDAsBc,IAAD,SACiBW,KAAKL,MAAMsB,KAAzBC,EADH,EACGA,GAAI7B,EADP,EACOA,MACZ,OACI,yBAAKe,UAAU,8CACX,yBAAKA,UAAU,YACX,4BACIzB,KAAK,SACLyB,UAAU,kCACVN,GAAG,gBACHuB,cAAY,WACZC,gBAAc,OACdC,gBAAc,QANlB,oBAQW,0BAAMnB,UAAU,oCAE3B,wBAAIA,UAAU,gBAAgBoB,kBAAgB,iBAC1C,wBAAInB,QAAS,kBAAI,EAAKA,QAAQ,OAAQ,KAClC,wBAAIoB,KAAK,SAASrB,UAAiB,SAALc,GAAuB,IAAR7B,EAAa,gBAAkB,IACxE,0BAAMe,UAAU,6BAAhB,gBAKR,wBAAIC,QAAS,kBAAI,EAAKA,QAAQ,QAAS,KACnC,wBAAIoB,KAAK,SAASrB,UAAiB,SAALc,IAAwB,IAAT7B,EAAc,gBAAkB,IACzE,0BAAMe,UAAU,8BAAhB,gBAKR,wBAAIqB,KAAK,YAAYrB,UAAU,YAC/B,wBAAKC,QAAS,kBAAI,EAAKA,QAAQ,UAAW,KACtC,wBAAIoB,KAAK,SAAUrB,UAAiB,WAALc,IAA0B,IAAT7B,EAAc,gBAAkB,IAAhF,yCAIJ,wBAAIgB,QAAS,kBAAI,EAAKA,QAAQ,SAAU,KACpC,wBAAIoB,KAAK,SAAUrB,UAAiB,WAALc,GAAyB,IAAR7B,EAAa,gBAAkB,IAA/E,sCA3D5B,GAA0BkB,aCmBXmB,EAjBf,uKAEI,OACE,yBAAKtB,UAAU,OAEb,kBAACuB,EAAD,CACEhB,SAAUX,KAAKhB,MAAM2B,WAGvB,kBAACiB,EAAD,CACER,OAAQpB,KAAKhB,MAAMoC,cAV7B,GAA6Bb,aCAhBsB,EAAb,4MAEEC,eAAiB,WACf,EAAK9C,MAAM8C,eAAe,EAAK9C,MAAM+C,KAAKjC,KAH9C,EAMEkC,aAAe,WACb,EAAKhD,MAAMgD,aAAa,EAAKhD,MAAM+C,KAAKjC,IACxC,EAAKd,MAAMa,eARf,EAWEoC,WAAa,WACX,EAAKjD,MAAMkD,aACX,EAAKlD,MAAMiD,WAAW,EAAKjD,MAAM+C,OAbrC,uDAgBY,IAAD,EACiB/B,KAAKhB,MAArB+C,EADD,EACCA,KAAMI,EADP,EACOA,MACd,OACE,4BACE,gCAAOA,EAAQ,EAAf,KACA,gCAAOJ,EAAK3C,KAAZ,KACA,wBAAIgB,UAAU,eACZ,0BACEA,UAAW2B,EAAKhC,OAAS,4BAA8B,6BACvDM,QAASL,KAAK8B,gBAEZC,EAAKhC,OAAS,oBAAc,YAGlC,wBAAIK,UAAU,eACZ,4BACEzB,KAAK,SACLyB,UAAU,yBACVC,QAASL,KAAKiC,YAEd,0BAAM7B,UAAU,sBALlB,YADF,QAQE,4BACEzB,KAAK,SACLyB,UAAU,wBACVC,QAASL,KAAKgC,cAEd,0BAAM5B,UAAU,qBALlB,gBAtCV,GAA8BG,aAuDxBC,EAAqB,CACzBsB,eNpC0B,SAAChD,GAAD,MAAc,CACtCH,KClByB,gBDmBzBG,YMmCFkD,aNhCwB,SAAClD,GAAD,MAAc,CACpCH,KC5BuB,cD6BvBG,YM+BFmD,WAAYpD,EACZgB,YAAajB,EACbsD,WAAYxD,GAGC+B,eAZS,SAACd,GAAD,MAAY,KAYIa,EAAzBC,CAA6CoB,GC/D/CO,EAAb,kDACE,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,SAAW,SAACC,GACV,IAAMC,EAASD,EAAMC,OACfC,EAAOD,EAAOC,KAChBC,EAAwB,aAAhBF,EAAOR,KAAsBQ,EAAOG,QAAUH,EAAOE,MACjE,EAAKL,MAAMqD,SACA,eAATjD,EAAwBC,EAAQ,EAAKM,MAAM2C,WAClC,iBAATlD,EAA0BC,EAAQ,EAAKM,MAAM4C,cAE/C,EAAKhD,SAAL,eACGH,EAAOC,KAfV,EAAKM,MAAQ,CACV2C,WAAY,GACZC,cAAe,GALD,EADrB,qDAuBY,IACAC,EAAUxC,KAAKhB,MAAfwD,MADD,EAE8BxC,KAAKL,MAAlC2C,EAFD,EAECA,WAAYC,EAFb,EAEaA,aACdE,EAAWD,EAAME,KAAI,SAACX,EAAMI,GAAP,OACzB,kBAAC,EAAD,CACEQ,IAAKR,EACLJ,KAAMA,EACNI,MAAOA,OAIX,OACE,yBAAK/B,UAAU,sBACb,yBAAKA,UAAU,4DACb,2BAAOA,UAAU,gDACf,+BACE,4BACE,wBAAIA,UAAU,eAAd,OACA,wBAAIA,UAAU,eAAd,UACA,wBAAIA,UAAU,eAAd,sBACA,wBAAIA,UAAU,eAAd,4BAGJ,+BACE,4BACE,6BACA,4BACE,2BACEzB,KAAK,OACLyB,UAAU,eACVf,MAAOiD,EACPlD,KAAK,aACLH,SAAUe,KAAKf,YAGnB,4BACE,4BACEG,KAAK,eACLgB,UAAU,eACVf,MAAOkD,EACPtD,SAAUe,KAAKf,UAEf,4BAAQI,OAAQ,GAAhB,oBACA,4BAAQA,MAAO,GAAf,WACA,4BAAQA,MAAO,GAAf,uBAGJ,8BAEDoD,UAxEf,GAA8BlC,aAyFfE,eARS,SAACd,GAAD,MAAY,CAClC6C,MAAO7C,EAAM6C,SAGY,GAIZ/B,CAA6C2B,GCrF/CQ,EAAb,kDACE,WAAY5D,GAAQ,IAAD,8BACjB,cAAMA,IAeR6D,aAAe,WACT,EAAK7D,MAAMH,SAASiB,GACtB,EAAKd,MAAMkD,aAEX,EAAKlD,MAAM6D,eAEb,EAAK7D,MAAM8D,YAAY,CACrBhD,GAAI,GACJV,KAAM,GACNW,QAAQ,KAzBO,EA6BnBsC,SAAW,SAACC,EAAYC,GACtBA,EAAepB,SAASoB,EAAc,IACtC,EAAKhD,SAAS,CACZwD,OAAQ,CACN3D,KAAMkD,EACNvC,OAAQwC,MAlCK,EAuCnB5B,SAAW,SAACC,GACV,EAAKrB,SAAS,CACZqB,QAASA,KAzCM,EA6CnBQ,OAAS,SAACL,EAAQC,GAChB,EAAKzB,SAAS,CACZ0B,KAAM,CACJC,GAAIH,EACJ1B,MAAO2B,MA9CX,EAAKrB,MAAQ,CACXoD,OAAQ,CACN3D,KAAM,GACNW,QAAS,GAEXa,QAAS,GACTK,KAAM,CACJC,GAAI,GACJ7B,MAAO,IAXM,EADrB,qDAuDW,IAQCc,EAAkBH,KAAKhB,MAAvBmB,cAiCR,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,eACb,iEADF,IAC6B,8BAG7B,yBAAKA,UAAU,OACb,kBAAC,EAAD,MAEA,yBAAKA,UAAWD,EAAgB,uCAAyC,2CACvE,4BACExB,KAAK,SACLyB,UAAU,kBACVC,QAASL,KAAK6C,cAEd,0BAAMzC,UAAU,oBALlB,6BASA,kBAAC4C,EAAD,CACErC,SAAUX,KAAKW,SACfS,OAAQpB,KAAKoB,SAGf,kBAAC,EAAD,CACEiB,SAAUrC,KAAKqC,kBAzH7B,GAAyB9B,aAwInBC,EAAqB,CACzBqC,aRrIwB,iBAAO,CAC7BlE,KCTuB,gBO8IzBuD,WAAYxD,EACZoE,YAAajE,GAGA4B,eAXS,SAACd,GAAD,MAAY,CAClCQ,cAAeR,EAAMQ,cACrBtB,SAAUc,EAAMd,YASsB2B,EAAzBC,CAA6CmC,GC1IxCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BChBAC,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,UACvCC,EAAeL,GAAc,GAC/BnB,GAAS,EAEPyB,EAAK,WACP,OAAOC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WAAqBC,SAAS,IAAIC,UAAU,IAGtEC,EAAY,WACd,OAAON,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,KAG9EO,EAAY,SAACb,EAAMxD,GACrB,IAAIsE,GAAU,EAMd,OALAd,EAAKe,SAAQ,SAACC,EAAKnC,GACbmC,EAAIxE,KAAOA,IACbsE,EAASjC,MAGNiC,GCpBLT,EAAe,CACjB7D,GAAI,GACJV,KAAM,GACNW,QAAQ,GCOGwE,EANGC,YAAgB,CAC9BhC,MFkBW,WAA8C,IAA7C7C,EAA4C,uDAApCgE,EAAoC,yCAApBhF,EAAoB,EAApBA,KAAMG,EAAc,EAAdA,QAC1C,OAAQH,GAEJ,IT3BgB,WS4BZ,OAAO,YAAIgB,GAEf,IT7BiB,YS8Bb,IAAMoC,EAAO,CACTjC,GAAIhB,EAAQgB,GACZV,KAAMN,EAAQM,KACdW,UAA4B,SAAnBjB,EAAQiB,OAAoBjB,EAAQiB,SAYjD,OAVKgC,EAAKjC,IAKS,KADfqC,EAAQgC,EAAUxE,EAAOoC,EAAKjC,OAE1BH,EAAMwC,GAASJ,IALnBA,EAAKjC,GAAKoE,IACVvE,EAAM8E,KAAK1C,IAOf0B,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUhF,IACtC,YAAIA,GAEf,ITzCqB,gBSkDjB,OAPe,KADfwC,EAAQgC,EAAUxE,EAAOb,MAErBa,EAAMwC,GAAN,eACOxC,EAAMwC,GADb,CAEIpC,QAASJ,EAAMwC,GAAOpC,SAE1B0D,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUhF,KAE1C,YAAIA,GAEf,ITzDmB,cS+Df,OAJe,KADfwC,EAAQgC,EAAUxE,EAAOb,MAErBa,EAAMiF,OAAOzC,EAAO,GACpBsB,aAAaiB,QAAQ,QAASnB,KAAKoB,UAAUhF,KAE1C,YAAIA,GAEf,QACI,OAAOA,IE7DfQ,cCJW,WAAqC,IAApCR,EAAmC,iGAAXhB,EAAW,EAAXA,KACpC,OAAQA,GAER,IZFuB,cYGnB,OAAQgB,EAEZ,IZHqB,YYIjB,OAAO,EAEX,IZPsB,aYQlB,OAAO,EAEX,QACI,OAAOA,IDRXd,SDDW,WAA8C,IAA7Cc,EAA4C,uDAApCgE,EAAoC,yCAApBhF,EAAoB,EAApBA,KAAMG,EAAc,EAAdA,QAC1C,OAAQH,GAER,IVPqB,YUSjB,OADAgB,EAAQb,EACD,eAAIa,GAEf,QACI,OAAOA,MGNTkF,EAAQC,YACZP,EACArB,OAAO6B,8BAAgC7B,OAAO6B,gCAGhDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAQA,GAChB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SL+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.184a9596.chunk.js","sourcesContent":["import * as types from '../constants/ActionTypes';\r\n\r\nexport const listAll = (payload) => ({\r\n    type: types.LIST_ALL,\r\n    payload\r\n})\r\n\r\nexport const saveTask = (payload) => ({\r\n    type: types.SAVE_TASK,\r\n    payload\r\n})\r\n\r\nexport const toggleForm = () => ({\r\n    type: types.TOGGLE_FORM\r\n})\r\n\r\nexport const openForm = () => ({\r\n    type: types.OPEN_FORM\r\n})\r\n\r\nexport const closeForm = () => ({\r\n    type: types.CLOSE_FORM\r\n})\r\n\r\nexport const updateStatus = (payload) => ({\r\n    type: types.UPDATE_STATUS,\r\n    payload\r\n})\r\n\r\nexport const deleteTask = (payload) => ({\r\n    type: types.DELETE_TASK,\r\n    payload\r\n})\r\n\r\nexport const editTask = (payload) => ({\r\n    type: types.EDIT_TASK,\r\n    payload\r\n})\r\n","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { saveTask, closeForm } from '../actions';\r\n\r\nexport class TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.editTask) {\r\n      this.setState({\r\n        id: this.props.editTask.id,\r\n        name: this.props.editTask.name,\r\n        status: this.props.editTask.status\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if (prevProps.editTask !== this.props.editTask) {\r\n      if (this.props.editTask) {\r\n        this.setState({\r\n          id: this.props.editTask.id,\r\n          name: this.props.editTask.name,\r\n          status: this.props.editTask.status,\r\n        })\r\n      } else {\r\n        this.onClear();\r\n      }\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  onSave = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSaveTask(this.state);\r\n    this.onClear();\r\n    this.props.onCloseForm();\r\n  }\r\n\r\n  onClear = () => {\r\n    this.setState({\r\n      id: '',\r\n      name: '',\r\n      status: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { id, name, status } = this.state;\r\n    const { isDisplayForm } = this.props;\r\n    if (!isDisplayForm) return '';\r\n    return (\r\n      <div className=\"col-xs-12 col-sm-4 col-md-4 col-lg-4\">\r\n        {/* Form */}\r\n        <div className=\"panel panel-warning\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">\r\n              {id ? \"Cập nhật công việc\" : \"Thêm Công Việc\"}\r\n              <span\r\n                className=\"fa fa-times-circle text-right\"\r\n                onClick={this.props.onCloseForm}\r\n              ></span>\r\n            </h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            <form onSubmit={this.onSave} >\r\n              <div className=\"form-group\">\r\n                <label>Tên: </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Trạng Thái: </label>\r\n                <select\r\n                  name=\"status\"\r\n                  className=\"form-control\"\r\n                  value={status}\r\n                  onChange={this.onChange}\r\n                >\r\n                  <option value={false}>Ẩn</option>\r\n                  <option value={true}>Kích Hoạt</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <button type=\"submit\" className=\"btn btn-warning\">\r\n                  <span className=\"fa fa-plus mr-5\" ></span>Lưu Lại\r\n                </button> &nbsp;\r\n                <button\r\n                  type=\"reset\"\r\n                  className=\"btn btn-danger\"\r\n                  onClick={this.onClear}\r\n                >\r\n                  <span className=\"fa fa-close mr-5\" ></span>Hủy Bỏ\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isDisplayForm: state.isDisplayForm,\r\n  editTask: state.editTask,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  onSaveTask: saveTask,\r\n  onCloseForm: closeForm,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             keyword: '',\r\n        }\r\n    };\r\n\r\n    onChange = (event) => {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        name=\"keyword\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Nhập từ khóa ...\"\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\n\r\nexport class Sort extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             sort: {\r\n                 by: 'name',\r\n                 value: 1\r\n             }\r\n        }\r\n    };\r\n\r\n    onClick = (sortBy, sortValue, event) => {\r\n        this.setState({\r\n            sort: {\r\n                by: sortBy,\r\n                value: parseInt(sortValue)\r\n            }\r\n        });\r\n        this.props.onSort(sortBy, sortValue);\r\n    }\r\n    \r\n    render() {\r\n        const { by, value } = this.state.sort;\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"dropdown\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary dropdown-toggle\"\r\n                        id=\"dropdownMenu1\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"true\"\r\n                    >\r\n                        Sắp Xếp<span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={()=>this.onClick('name', 1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                    Tên A-Z\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('name', -1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                    Tên Z-A\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li  onClick={()=>this.onClick('status', -1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Kích Hoạt\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('status', 1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Ẩn\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sort\r\n","import React, { Component } from 'react'\r\nimport TaskControlSearch from './TaskControlSearch';\r\nimport TaskControlSort from './TaskControlSort';\r\n\r\nexport class Control extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        {/* Search */}\r\n        <TaskControlSearch \r\n          onSearch={this.props.onSearch}\r\n        />\r\n        {/* Sort */}\r\n        <TaskControlSort\r\n          onSort={this.props.onSort}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateStatus, deleteTask, closeForm, openForm, editTask } from '../actions';\r\n\r\nexport class TaskItem extends Component {\r\n  \r\n  onUpdateStatus = () => {\r\n    this.props.onUpdateStatus(this.props.task.id);\r\n  }\r\n\r\n  onDeleteTask = () => {\r\n    this.props.onDeleteTask(this.props.task.id);\r\n    this.props.onCloseForm();\r\n  }\r\n\r\n  onEditTask = () => {\r\n    this.props.onOpenForm();\r\n    this.props.onEditTask(this.props.task);   \r\n  }\r\n\r\n  render() {\r\n    const { task, index } = this.props;\r\n    return (\r\n      <tr>\r\n        <td> { index + 1 } </td>\r\n        <td> { task.name } </td>\r\n        <td className=\"text-center\">\r\n          <span \r\n            className={task.status ? \"label label-danger status\" : \"label label-success status\"}\r\n            onClick={this.onUpdateStatus}\r\n          >\r\n            { task.status ? \"Kích Hoạt\" : \"Ẩn\" }\r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button \r\n            type=\"button\" \r\n            className=\"btn btn-sm btn-warning\"\r\n            onClick={this.onEditTask}\r\n          >\r\n            <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n          </button> &nbsp;\r\n          <button \r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-danger\"\r\n            onClick={this.onDeleteTask}\r\n          >\r\n            <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  \r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  onUpdateStatus: updateStatus,\r\n  onDeleteTask: deleteTask,\r\n  onEditTask: editTask,\r\n  onCloseForm: closeForm,\r\n  onOpenForm: openForm,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport TaskItem from './TaskItem';\r\n\r\nexport class TaskList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       filterName: '',\r\n       filterStatus: -1\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    this.props.onFilter(\r\n      name === \"filterName\" ? value : this.state.filterName,\r\n      name === \"filterStatus\" ? value : this.state.filterStatus\r\n    );\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { tasks } = this.props;\r\n    const { filterName, filterStatus } = this.state;\r\n    const elmTasks = tasks.map((task, index) => (\r\n      <TaskItem \r\n        key={index}\r\n        task={task}\r\n        index={index}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div className=\"row mt-15 tasklist\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 table-responsive\">\r\n          <table className=\"table table-bordered table-hover text-nowrap\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">STT</th>\r\n                <th className=\"text-center\">Tên</th>\r\n                <th className=\"text-center\">Trạng Thái</th>\r\n                <th className=\"text-center\">Hành Động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td></td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={filterName}\r\n                    name=\"filterName\"\r\n                    onChange={this.onChange}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    name=\"filterStatus\"\r\n                    className=\"form-control\"\r\n                    value={filterStatus}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value={-1}>Tất Cả</option>\r\n                    <option value={0}>Ẩn</option>\r\n                    <option value={1}>Kích Hoạt</option>\r\n                  </select>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n              {elmTasks}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.tasks,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { toggleForm, editTask, openForm } from './actions';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      filter: {\n        name: '',\n        status: -1\n      },\n      keyword: '',\n      sort: {\n        by: '',\n        value: 1\n      }\n    }\n  }\n\n  onToggleForm = () => {\n    if (this.props.editTask.id) {\n      this.props.onOpenForm();\n    } else {\n      this.props.onToggleForm();\n    }\n    this.props.onClearTask({\n      id: '',\n      name: '',\n      status: false\n    });\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = parseInt(filterStatus, 10);\n    this.setState({\n      filter: {\n        name: filterName,\n        status: filterStatus\n      },\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword: keyword,\n    })\n  };\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({\n      sort: {\n        by: sortBy,\n        value: sortValue\n      }\n    })\n  }\n\n  render() {\n    // let {\n    //   tasks,\n    //   filter, \n    //   keyword, \n    //   sort \n    // } = this.state;\n\n    const { isDisplayForm } = this.props;\n\n    // tasks = tasks.filter((task) => {\n    //   return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n    // });\n\n    // if (filter) {\n    //   if (filter.name) {\n    //     tasks = tasks.filter((task) => {\n    //       return task.name.toLowerCase().indexOf(filter.name.toLowerCase()) !== -1;\n    //     })\n    //   }\n    //   if (filter.status !== -1) {\n    //     tasks = tasks.filter((task) => {\n    //       return task.status === (filter.status === 0 ? false : true);\n    //     })\n    //   }\n    // };\n\n    // if (sort.by==='name') {\n    //   tasks.sort((a, b) => {\n    //     if (a.name > b.name) return sort.value;\n    //     else if (a.name < b.name) return -sort.value;\n    //     else return 0;\n    //   })\n    // } else {\n    //   tasks.sort((a, b) => {\n    //     if (a.status > b.status) return sort.value;\n    //     else if (a.status < b.status) return -sort.value;\n    //     else return 0;\n    //   })\n    // }\n\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"text-center\">\n          <h1>Quản Lý Công Việc</h1> <hr />\n        </div>\n\n        <div className=\"row\">\n          <TaskForm />\n\n          <div className={isDisplayForm ? \"col-xs-12 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={this.onToggleForm}\n            >\n              <span className=\"fa fa-plus mr-5\"></span>\n              Thêm Công Việc\n            </button>\n            {/* Search - Sort */}\n            <TaskControl\n              onSearch={this.onSearch}\n              onSort={this.onSort}\n            />\n            {/* List */}\n            <TaskList\n              onFilter={this.onFilter}\n            />\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isDisplayForm: state.isDisplayForm,\n  editTask: state.editTask,\n})\n\nconst mapDispatchToProps = {\n  onToggleForm: toggleForm,\n  onOpenForm: openForm,\n  onClearTask: editTask,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from '../constants/ActionTypes';\r\n\r\nconst data = JSON.parse(localStorage.getItem('tasks'));\r\nconst initialState = data ? data : [];\r\nlet index = -1;\r\n\r\nconst s4 = () => {\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nconst generateID =() => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nconst findIndex = (data, id) => {\r\n    let result = -1;\r\n    data.forEach((row, index) => {\r\n      if (row.id === id) {\r\n        result = index;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case types.LIST_ALL:\r\n            return [...state]\r\n\r\n        case types.SAVE_TASK:\r\n            const task = {\r\n                id: payload.id,\r\n                name: payload.name,\r\n                status: (payload.status === 'true' | payload.status) ? true : false,\r\n            };\r\n            if (!task.id) {\r\n                task.id = generateID();\r\n                state.push(task);\r\n            } else {\r\n                index = findIndex(state, task.id);\r\n                if (index !== -1) {\r\n                    state[index] = task;\r\n                };\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state]\r\n\r\n        case types.UPDATE_STATUS:\r\n            index = findIndex(state, payload);\r\n            if (index !== -1) {\r\n                state[index] = {\r\n                    ...state[index],\r\n                    status: !state[index].status,\r\n                }\r\n                localStorage.setItem('tasks', JSON.stringify(state));\r\n            }\r\n            return [...state]\r\n\r\n        case types.DELETE_TASK:\r\n            index = findIndex(state, payload);\r\n            if (index !== -1) {\r\n                state.splice(index, 1);\r\n                localStorage.setItem('tasks', JSON.stringify(state));\r\n            }\r\n            return [...state];\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}","import * as types from '../constants/ActionTypes';\r\nconst initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n    case types.EDIT_TASK:\r\n        state = payload;\r\n        return {...state}\r\n\r\n    default:\r\n        return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport editTask from './editTask';\r\n\r\nconst myReducer = combineReducers({\r\n    tasks,\r\n    isDisplayForm,\r\n    editTask,\r\n});\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\nconst initialState = false;\r\n\r\nexport default (state = initialState, { type }) => {\r\n    switch (type) {\r\n\r\n    case types.TOGGLE_FORM:\r\n        return !state;\r\n    \r\n    case types.OPEN_FORM:\r\n        return true;\r\n\r\n    case types.CLOSE_FORM:\r\n        return false;\r\n\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport myReducer from './reducers';\n\nconst store = createStore(\n  myReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}