{"version":3,"sources":["components/TaskForm.js","actions/index.js","constants/ActionTypes.js","components/TaskControlSearch.js","components/TaskControlSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/index.js","index.js"],"names":["TaskForm","props","onCloseForm","onChange","event","target","name","value","type","checked","setState","onSubmit","preventDefault","onAddTask","state","onClear","id","status","this","className","onClick","Component","mapDispatchToProps","payload","connect","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","sort","by","parseInt","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","TaskControlSearch","TaskControlSort","TaskItem","onUpdateStatus","task","onDeleteItem","onUpdateItem","index","TaskList","onFilter","filterName","filterStatus","tasks","elmTasks","map","key","App","onToggleForm","isDisplayForm","taskEditting","onOpenForm","data","findIndex","generateID","push","localStorage","setItem","JSON","stringify","result","forEach","splice","filter","elmTaskForm","TaskControl","Boolean","window","location","hostname","match","parse","getItem","initialState","s4","Math","floor","random","toString","substring","myReducer","combineReducers","newTask","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e182d584.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTask } from '../actions';\r\n\r\nexport class TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      status: false,\r\n    }\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   if (this.props.task) {\r\n  //     this.setState({\r\n  //       id: this.props.task.id,\r\n  //       name: this.props.task.name,\r\n  //       status: this.props.task.status\r\n  //     })\r\n  //   }\r\n  // }\r\n  \r\n  onCloseForm = () => {\r\n    this.props.onCloseForm();\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    if (name === \"status\") {\r\n      value = target.value === \"true\" | target.value === true ? true : false;\r\n    }\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onAddTask(this.state);\r\n    this.onClear();\r\n    this.onCloseForm();\r\n  }\r\n\r\n  onClear = () => {\r\n    this.setState({\r\n      id: '',\r\n      name: '',\r\n      status: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { id, name, status } = this.state;\r\n    return (\r\n      <div className=\"col-xs-12 col-sm-4 col-md-4 col-lg-4\">\r\n        {/* Form */}\r\n        <div className=\"panel panel-warning\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">\r\n              {id ? \"Cập nhật công việc\" : \"Thêm Công Việc\"}\r\n              <span \r\n              className=\"fa fa-times-circle text-right\"\r\n              onClick={this.onCloseForm}\r\n              ></span>\r\n            </h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            <form onSubmit={this.onSubmit} >\r\n              <div className=\"form-group\">\r\n                <label>Tên: </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Trạng Thái: </label>\r\n                <select\r\n                  name=\"status\"\r\n                  className=\"form-control\"\r\n                  value={status}\r\n                  onChange={this.onChange}\r\n                >\r\n                  <option value={false}>Ẩn</option>\r\n                  <option value={true}>Kích Hoạt</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <button type=\"submit\" className=\"btn btn-warning\">\r\n                  <span className=\"fa fa-plus mr-5\" ></span>Lưu Lại\r\n                    </button> &nbsp;\r\n                    <button \r\n                      type=\"reset\" \r\n                      className=\"btn btn-danger\"\r\n                      onClick={this.onClear}\r\n                    >\r\n                  <span className=\"fa fa-close mr-5\" ></span>Hủy Bỏ\r\n                    </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  \r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  onAddTask : addTask\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm)","import * as types from '../constants/ActionTypes';\r\n\r\nexport const listAll = (payload) => ({\r\n    type: types.LIST_ALL,\r\n    payload\r\n})\r\n\r\nexport const addTask = (payload) => ({\r\n    type: types.ADD_TASK,\r\n    payload\r\n})\r\n","export const LIST_ALL = 'LIST_ALL';\r\nexport const ADD_TASK = 'ADD_TASK';","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             keyword: '',\r\n        }\r\n    };\r\n\r\n    onChange = (event) => {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        name=\"keyword\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Nhập từ khóa ...\"\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\n\r\nexport class Sort extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             sort: {\r\n                 by: 'name',\r\n                 value: 1\r\n             }\r\n        }\r\n    };\r\n\r\n    onClick = (sortBy, sortValue, event) => {\r\n        this.setState({\r\n            sort: {\r\n                by: sortBy,\r\n                value: parseInt(sortValue)\r\n            }\r\n        });\r\n        this.props.onSort(sortBy, sortValue);\r\n    }\r\n    \r\n    render() {\r\n        const { by, value } = this.state.sort;\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"dropdown\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary dropdown-toggle\"\r\n                        id=\"dropdownMenu1\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"true\"\r\n                    >\r\n                        Sắp Xếp<span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={()=>this.onClick('name', 1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                    Tên A-Z\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('name', -1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                    Tên Z-A\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li  onClick={()=>this.onClick('status', -1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Kích Hoạt\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('status', 1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Ẩn\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sort\r\n","import React, { Component } from 'react'\r\nimport TaskControlSearch from './TaskControlSearch';\r\nimport TaskControlSort from './TaskControlSort';\r\n\r\nexport class Control extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        {/* Search */}\r\n        <TaskControlSearch \r\n          onSearch={this.props.onSearch}\r\n        />\r\n        {/* Sort */}\r\n        <TaskControlSort\r\n          onSort={this.props.onSort}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react'\r\n\r\nexport class TaskItem extends Component {\r\n  \r\n  onUpdateStatus = () => {\r\n    this.props.onUpdateStatus(this.props.task.id)\r\n  }\r\n\r\n  onDeleteItem = () => {\r\n    this.props.onDeleteItem(this.props.task.id)\r\n  }\r\n\r\n  onUpdateItem = () => {\r\n    this.props.onUpdateItem(this.props.task.id)\r\n  }\r\n\r\n  render() {\r\n    const { task, index } = this.props;\r\n    return (\r\n      <tr>\r\n        <td> { index + 1 } </td>\r\n        <td> { task.name } </td>\r\n        <td className=\"text-center\">\r\n          <span \r\n            className={task.status ? \"label label-danger status\" : \"label label-success status\"}\r\n            onClick={this.onUpdateStatus}\r\n          >\r\n            { task.status ? \"Kích Hoạt\" : \"Ẩn\" }\r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button \r\n            type=\"button\" \r\n            className=\"btn btn-sm btn-warning\"\r\n            onClick={this.onUpdateItem}\r\n          >\r\n            <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n          </button> &nbsp;\r\n          <button \r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-danger\"\r\n            onClick={this.onDeleteItem}\r\n          >\r\n            <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskItem\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux'\r\nimport TaskItem from './TaskItem';\r\n\r\nexport class TaskList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       filterName: '',\r\n       filterStatus: -1\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    this.props.onFilter(\r\n      name === \"filterName\" ? value : this.state.filterName,\r\n      name === \"filterStatus\" ? value : this.state.filterStatus\r\n    );\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { tasks } = this.props;\r\n    const { filterName, filterStatus } = this.state;\r\n    const elmTasks = tasks.map((task, index) => (\r\n      <TaskItem \r\n        key={index}\r\n        task={task}\r\n        index={index}\r\n        onUpdateStatus={this.props.onUpdateStatus}\r\n        onDeleteItem={this.props.onDeleteItem}\r\n        onUpdateItem={this.props.onUpdateItem}\r\n      />\r\n    ));\r\n\r\n    return (\r\n      <div className=\"row mt-15 tasklist\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 table-responsive\">\r\n          <table className=\"table table-bordered table-hover text-nowrap\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">STT</th>\r\n                <th className=\"text-center\">Tên</th>\r\n                <th className=\"text-center\">Trạng Thái</th>\r\n                <th className=\"text-center\">Hành Động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td></td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={filterName}\r\n                    name=\"filterName\"\r\n                    onChange={this.onChange}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    name=\"filterStatus\"\r\n                    className=\"form-control\"\r\n                    value={filterStatus}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value={-1}>Tất Cả</option>\r\n                    <option value={0}>Ẩn</option>\r\n                    <option value={1}>Kích Hoạt</option>\r\n                  </select>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n              {elmTasks}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tasks: state.tasks,\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList)","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isDisplayForm: false,\n      taskEditting: null,\n      filter: {\n        name: '',\n        status: -1\n      },\n      keyword: '',\n      sort: {\n        by: '',\n        value: 1\n      }\n    }\n  }\n\n  onToggleForm = () => {\n    if (this.state.isDisplayForm && this.state.taskEditting !== null) {\n      this.setState({\n        isDisplayForm: true,\n        taskEditting: null\n      })\n    } else {\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm,\n        taskEditting: null,\n      })\n    }\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false,\n      taskEditting: null,\n    })\n  }\n\n  onOpenForm = () => {\n    this.setState({\n      isDisplayForm: true,\n    })\n  }\n\n  onSubmit = (data) => {\n    const { tasks } = this.state;\n    if (data.id) {\n      const index = this.findIndex(data.id);\n      tasks[index] = data;\n    } else {\n      data.id = this.generateID();\n      tasks.push(data);\n    }\n    this.setState({\n      tasks: tasks,\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  onUpdateStatus = (id) => {\n    const { tasks } = this.state;\n    const index = this.findIndex(id);\n    if (index !== -1) {\n      tasks[index].status = !tasks[index].status;\n      this.setState({\n        tasks: tasks,\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n  }\n\n  findIndex = (id) => {\n    const { tasks } = this.state;\n    let result = -1;\n    tasks.forEach((task, index) => {\n      if (task.id === id) {\n        result = index;\n      }\n    });\n    return result;\n  }\n\n  onDeleteItem = (id) => {\n    const { tasks } = this.state;\n    const index = this.findIndex(id);\n    if (index !== -1) {\n      tasks.splice(index, 1);\n      this.setState({\n        tasks: tasks,\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.onCloseForm();\n    }\n  }\n\n  onUpdateItem = (id) => {\n    const { tasks } = this.state;\n    const index = this.findIndex(id);\n    const taskEditting = tasks[index];\n    this.setState({\n      taskEditting: taskEditting,\n    });\n    this.onOpenForm();\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = parseInt(filterStatus, 10);\n    this.setState({\n      filter: {\n        name: filterName,\n        status: filterStatus\n      },\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword: keyword,\n    })\n  };\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({\n      sort: {\n        by: sortBy,\n        value: sortValue\n      }\n    })\n  }\n\n  render() {\n    let { \n      // tasks, \n      isDisplayForm, \n      taskEditting, \n      // filter, \n      // keyword, \n      // sort \n    } = this.state;\n\n    // tasks = tasks.filter((task) => {\n    //   return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n    // });\n\n    // if (filter) {\n    //   if (filter.name) {\n    //     tasks = tasks.filter((task) => {\n    //       return task.name.toLowerCase().indexOf(filter.name.toLowerCase()) !== -1;\n    //     })\n    //   }\n    //   if (filter.status !== -1) {\n    //     tasks = tasks.filter((task) => {\n    //       return task.status === (filter.status === 0 ? false : true);\n    //     })\n    //   }\n    // };\n\n    // if (sort.by==='name') {\n    //   tasks.sort((a, b) => {\n    //     if (a.name > b.name) return sort.value;\n    //     else if (a.name < b.name) return -sort.value;\n    //     else return 0;\n    //   })\n    // } else {\n    //   tasks.sort((a, b) => {\n    //     if (a.status > b.status) return sort.value;\n    //     else if (a.status < b.status) return -sort.value;\n    //     else return 0;\n    //   })\n    // }\n\n    const elmTaskForm = isDisplayForm ?\n      <TaskForm\n        onCloseForm={this.onCloseForm}\n        onSubmit={this.onSubmit}\n        task={taskEditting}\n      />\n      : '';\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"text-center\">\n          <h1>Quản Lý Công Việc</h1> <hr />\n        </div>\n\n        <div className=\"row\">\n          {elmTaskForm}\n\n          <div className={isDisplayForm ? \"col-xs-12 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={this.onToggleForm}\n            >\n              <span className=\"fa fa-plus mr-5\"></span>\n              Thêm Công Việc\n            </button>\n            {/* Search - Sort */}\n            <TaskControl\n              onSearch={this.onSearch}\n              onSort={this.onSort}\n            />\n            {/* List */}\n            <TaskList\n              onUpdateStatus={this.onUpdateStatus}\n              onDeleteItem={this.onDeleteItem}\n              onUpdateItem={this.onUpdateItem}\n              onFilter={this.onFilter}\n            />\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from '../constants/ActionTypes';\r\n\r\nconst data = JSON.parse(localStorage.getItem('tasks'));\r\nconst initialState = data ? data : [];\r\n\r\nconst s4 = () => {\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nconst generateID =() => {\r\n    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case types.LIST_ALL:\r\n            return [...state]\r\n\r\n        case types.ADD_TASK:\r\n            const newTask = {\r\n                id: generateID(),\r\n                name: payload.name,\r\n                status: payload.status\r\n            };\r\n            state.push(newTask);\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n        return [...state]\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\n\r\nconst myReducer = combineReducers({\r\n    tasks,\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport myReducer from './reducers';\n\nconst store = createStore(myReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}